Index: compat-wireless-2012-09-07/drivers/net/wireless/rt2x00/rt2800lib.c
===================================================================
--- compat-wireless-2012-09-07.orig/drivers/net/wireless/rt2x00/rt2800lib.c
+++ compat-wireless-2012-09-07/drivers/net/wireless/rt2x00/rt2800lib.c
@@ -2541,192 +2541,216 @@ static int rt2800_get_txpower_bw_comp(st
 	return comp_value;
 }
 
-static u8 rt2800_compensate_txpower(struct rt2x00_dev *rt2x00dev, int is_rate_b,
-				   enum ieee80211_band band, int power_level,
-				   u8 txpower, int delta)
+#define	TXPOWER_CHAIN_0		FIELD8(0x0f)
+#define	TXPOWER_CHAIN_1		FIELD8(0xf0)
+
+static int rt2800_bbp_txpower_config(struct rt2x00_dev *rt2x00dev,
+		int power_level, int hw_max_txpower)
 {
-	u32 reg;
-	u16 eeprom;
-	u8 criterion;
-	u8 eirp_txpower;
-	u8 eirp_txpower_criterion;
-	u8 reg_limit;
+	u8 r1;
+	int bbp_r1_mode;
+	int bbp_txpower_drop;
 
-	if (!((band == IEEE80211_BAND_5GHZ) && is_rate_b))
-		return txpower;
+	if ((hw_max_txpower - power_level) >= 12) {
+		bbp_r1_mode = BBP1_TX_POWER_DROP_12_DBM;
+		bbp_txpower_drop = 12;
+	} else if ((hw_max_txpower - power_level) >= 6) {
+		bbp_r1_mode = BBP1_TX_POWER_DROP_6_DBM;
+		bbp_txpower_drop = 6;
+	} else {
+		bbp_r1_mode = BBP1_TX_POWER_NORMAL;
+		bbp_txpower_drop = 0;
+	}
 
-	if (test_bit(CAPABILITY_POWER_LIMIT, &rt2x00dev->cap_flags)) {
-		/*
-		 * Check if eirp txpower exceed txpower_limit.
-		 * We use OFDM 6M as criterion and its eirp txpower
-		 * is stored at EEPROM_EIRP_MAX_TX_POWER.
-		 * .11b data rate need add additional 4dbm
-		 * when calculating eirp txpower.
-		 */
-		rt2800_register_read(rt2x00dev, TX_PWR_CFG_0, &reg);
-		criterion = rt2x00_get_field32(reg, TX_PWR_CFG_0_6MBS);
+	rt2800_bbp_read(rt2x00dev, 1, &r1);
+	rt2x00_set_field8(&r1, BBP1_TX_POWER_CTRL, bbp_r1_mode);
+	rt2800_bbp_write(rt2x00dev, 1, r1);
 
-		rt2x00_eeprom_read(rt2x00dev,
-				   EEPROM_EIRP_MAX_TX_POWER, &eeprom);
+	return bbp_txpower_drop;
+}
 
-		if (band == IEEE80211_BAND_2GHZ)
-			eirp_txpower_criterion = rt2x00_get_field16(eeprom,
-						 EEPROM_EIRP_MAX_TX_POWER_2GHZ);
+static void rt2800_mac_txpower_setup_chain(struct rt2x00_dev *rt2x00dev,
+		u16 *eeprom, u8 txpower_calibrated, int power_level,
+		int bbp_txpower_drop, int delta, u8 chain)
+{
+	u8 *eeprom_bytes = (u8 *)eeprom;
+	u8 value, criterion;
+	int eirp, i, calculated_value;
+
+	criterion = rt2x00_get_field8(eeprom_bytes[9],
+		chain ? TXPOWER_CHAIN_1 : TXPOWER_CHAIN_0);
+	for (i = 0; i < EEPROM_TXPOWER_BYRATE_SIZE * 2; i++) {
+		value = rt2x00_get_field8(eeprom_bytes[i],
+			chain ? TXPOWER_CHAIN_1 : TXPOWER_CHAIN_0);
+		eirp = txpower_calibrated + (value - criterion);
+
+		/* first two bytes means CCK txpower */
+		if (i < 2)
+			eirp += 4;
+
+		if (bbp_txpower_drop || ((eirp - power_level) > 0))
+			calculated_value = value - (eirp - power_level) + bbp_txpower_drop + delta;
 		else
-			eirp_txpower_criterion = rt2x00_get_field16(eeprom,
-						 EEPROM_EIRP_MAX_TX_POWER_5GHZ);
+			calculated_value = value + delta;
 
-		eirp_txpower = eirp_txpower_criterion + (txpower - criterion) +
-			       (is_rate_b ? 4 : 0) + delta;
+		calculated_value = min(0xf, calculated_value);
+		calculated_value = max(0, calculated_value);
 
-		reg_limit = (eirp_txpower > power_level) ?
-					(eirp_txpower - power_level) : 0;
-	} else
-		reg_limit = 0;
+		value = calculated_value;
 
-	return txpower + delta - reg_limit;
+		rt2x00_set_field8(&eeprom_bytes[i],
+			chain ? TXPOWER_CHAIN_1 : TXPOWER_CHAIN_0, value);
+	}
 }
 
-static void rt2800_config_txpower(struct rt2x00_dev *rt2x00dev,
-				  enum ieee80211_band band,
-				  int power_level)
+static void rt2800_mac_txpower_config(struct rt2x00_dev *rt2x00dev,
+		u16 *eeprom, u8 txpower_calibrated, int hw_max_txpower,
+		int power_level, int bbp_txpower_drop, int delta)
+{
+	u32 reg_value = 0;
+
+	/* setup power values for tx chain 0 */
+	rt2800_mac_txpower_setup_chain(rt2x00dev, eeprom,
+		txpower_calibrated, power_level, bbp_txpower_drop, delta, 0);
+
+	/* setup power values for tx chain 1 */
+	rt2800_mac_txpower_setup_chain(rt2x00dev, eeprom,
+		txpower_calibrated, power_level, bbp_txpower_drop, delta, 1);
+
+	/* write power values to MAC registers */
+	rt2x00_set_field32(&reg_value, FIELD32(0x0000ffff), eeprom[0]);
+	rt2x00_set_field32(&reg_value, FIELD32(0xffff0000), eeprom[1]);
+	rt2800_register_write(rt2x00dev, TX_PWR_CFG_0, reg_value);
+
+	rt2x00_set_field32(&reg_value, FIELD32(0x0000ffff), eeprom[2]);
+	rt2x00_set_field32(&reg_value, FIELD32(0xffff0000), eeprom[3]);
+	rt2800_register_write(rt2x00dev, TX_PWR_CFG_1, reg_value);
+
+	rt2x00_set_field32(&reg_value, FIELD32(0x0000ffff), eeprom[4]);
+	rt2x00_set_field32(&reg_value, FIELD32(0xffff0000), eeprom[5]);
+	rt2800_register_write(rt2x00dev, TX_PWR_CFG_2, reg_value);
+
+	rt2x00_set_field32(&reg_value, FIELD32(0x0000ffff), eeprom[6]);
+	rt2x00_set_field32(&reg_value, FIELD32(0xffff0000), eeprom[7]);
+	rt2800_register_write(rt2x00dev, TX_PWR_CFG_3, reg_value);
+
+	rt2x00_set_field32(&reg_value, FIELD32(0x0000ffff), eeprom[8]);
+	rt2x00_set_field32(&reg_value, FIELD32(0xffff0000), 0);
+	rt2800_register_write(rt2x00dev, TX_PWR_CFG_4, reg_value);
+}
+
+static u8 rt2800_get_calibrated_txpower(struct rt2x00_dev *rt2x00dev,
+				enum ieee80211_band band)
 {
-	u8 txpower;
+	u8 txpower_calibrated;
 	u16 eeprom;
-	int i, is_rate_b;
-	u32 reg;
-	u8 r1;
-	u32 offset;
-	int delta;
 
 	/*
-	 * Calculate HT40 compensation delta
+	 * Get max EIRP value of OFDM MCS6 rate
 	 */
-	delta = rt2800_get_txpower_bw_comp(rt2x00dev, band);
+	if (test_bit(CAPABILITY_POWER_LIMIT, &rt2x00dev->cap_flags)) {
+		rt2x00_eeprom_read(rt2x00dev, EEPROM_EIRP_MAX_TX_POWER, &eeprom);
 
-	/*
-	 * calculate temperature compensation delta
-	 */
-	delta += rt2800_get_gain_calibration_delta(rt2x00dev);
+		if (band == IEEE80211_BAND_2GHZ) {
+			txpower_calibrated = rt2x00_get_field16(eeprom,
+				EEPROM_EIRP_MAX_TX_POWER_2GHZ);
+		} else {
+			txpower_calibrated = rt2x00_get_field16(eeprom,
+				EEPROM_EIRP_MAX_TX_POWER_5GHZ);
+		}
+	} else {
+		txpower_calibrated = 15;
+	}
+
+	return txpower_calibrated;
+}
+
+static int rt2800_get_hw_max_txpower(struct rt2x00_dev *rt2x00dev,
+				enum ieee80211_band band, u16 *eeprom,
+				u8 txpower_calibrated)
+{
+	int hw_max_txpower;
+	int max_offset = 0;
+	int i;
+	u8 *eeprom_bytes = (u8 *)eeprom;
+	u8 value;
+	u8 criterion_0, criterion_1;
 
 	/*
-	 * set to normal bbp tx power control mode: +/- 0dBm
+	 * Get max txpower offset of all data rates of all tx chains
 	 */
-	rt2800_bbp_read(rt2x00dev, 1, &r1);
-	rt2x00_set_field8(&r1, BBP1_TX_POWER_CTRL, 0);
-	rt2800_bbp_write(rt2x00dev, 1, r1);
-	offset = TX_PWR_CFG_0;
+	criterion_0 = rt2x00_get_field8(eeprom_bytes[9], TXPOWER_CHAIN_0);
+	criterion_1 = rt2x00_get_field8(eeprom_bytes[9], TXPOWER_CHAIN_1);
+	for (i = 0; i < EEPROM_TXPOWER_BYRATE_SIZE * 2; i++) {
+		int rate_b_offset = 0;
 
-	for (i = 0; i < EEPROM_TXPOWER_BYRATE_SIZE; i += 2) {
-		/* just to be safe */
-		if (offset > TX_PWR_CFG_4)
-			break;
+		if (i < 2)
+			rate_b_offset = 4;
 
-		rt2800_register_read(rt2x00dev, offset, &reg);
+		/* chain 0 */
+		value = rt2x00_get_field8(eeprom_bytes[i], TXPOWER_CHAIN_0);
+		max_offset = max(max_offset, value - criterion_0 + rate_b_offset);
 
-		/* read the next four txpower values */
-		rt2x00_eeprom_read(rt2x00dev, EEPROM_TXPOWER_BYRATE + i,
-				   &eeprom);
+		/* chain 1 */
+		value = rt2x00_get_field8(eeprom_bytes[i], TXPOWER_CHAIN_1);
+		max_offset = max(max_offset, value - criterion_1 + rate_b_offset);
+	}
 
-		is_rate_b = i ? 0 : 1;
-		/*
-		 * TX_PWR_CFG_0: 1MBS, TX_PWR_CFG_1: 24MBS,
-		 * TX_PWR_CFG_2: MCS4, TX_PWR_CFG_3: MCS12,
-		 * TX_PWR_CFG_4: unknown
-		 */
-		txpower = rt2x00_get_field16(eeprom,
-					     EEPROM_TXPOWER_BYRATE_RATE0);
-		txpower = rt2800_compensate_txpower(rt2x00dev, is_rate_b, band,
-					     power_level, txpower, delta);
-		rt2x00_set_field32(&reg, TX_PWR_CFG_RATE0, txpower);
+	/* Calculate max hardware txpower */
+	hw_max_txpower = txpower_calibrated + max_offset;
 
-		/*
-		 * TX_PWR_CFG_0: 2MBS, TX_PWR_CFG_1: 36MBS,
-		 * TX_PWR_CFG_2: MCS5, TX_PWR_CFG_3: MCS13,
-		 * TX_PWR_CFG_4: unknown
-		 */
-		txpower = rt2x00_get_field16(eeprom,
-					     EEPROM_TXPOWER_BYRATE_RATE1);
-		txpower = rt2800_compensate_txpower(rt2x00dev, is_rate_b, band,
-					     power_level, txpower, delta);
-		rt2x00_set_field32(&reg, TX_PWR_CFG_RATE1, txpower);
+	return hw_max_txpower;
+}
 
-		/*
-		 * TX_PWR_CFG_0: 5.5MBS, TX_PWR_CFG_1: 48MBS,
-		 * TX_PWR_CFG_2: MCS6,  TX_PWR_CFG_3: MCS14,
-		 * TX_PWR_CFG_4: unknown
-		 */
-		txpower = rt2x00_get_field16(eeprom,
-					     EEPROM_TXPOWER_BYRATE_RATE2);
-		txpower = rt2800_compensate_txpower(rt2x00dev, is_rate_b, band,
-					     power_level, txpower, delta);
-		rt2x00_set_field32(&reg, TX_PWR_CFG_RATE2, txpower);
+static void rt2800_config_txpower(struct rt2x00_dev *rt2x00dev,
+				  enum ieee80211_band band,
+				  int power_level)
+{
+	int delta;
+	int bbp_txpower_drop;
+	int hw_max_txpower;
+	u16 eeprom[EEPROM_TXPOWER_BYRATE_SIZE];
+	u8 txpower_calibrated;
+	int i;
 
-		/*
-		 * TX_PWR_CFG_0: 11MBS, TX_PWR_CFG_1: 54MBS,
-		 * TX_PWR_CFG_2: MCS7,  TX_PWR_CFG_3: MCS15,
-		 * TX_PWR_CFG_4: unknown
-		 */
-		txpower = rt2x00_get_field16(eeprom,
-					     EEPROM_TXPOWER_BYRATE_RATE3);
-		txpower = rt2800_compensate_txpower(rt2x00dev, is_rate_b, band,
-					     power_level, txpower, delta);
-		rt2x00_set_field32(&reg, TX_PWR_CFG_RATE3, txpower);
-
-		/* read the next four txpower values */
-		rt2x00_eeprom_read(rt2x00dev, EEPROM_TXPOWER_BYRATE + i + 1,
-				   &eeprom);
+	/*
+	 * Calculate HT40 compensation delta
+	 */
+	delta = rt2800_get_txpower_bw_comp(rt2x00dev, band);
 
-		is_rate_b = 0;
-		/*
-		 * TX_PWR_CFG_0: 6MBS, TX_PWR_CFG_1: MCS0,
-		 * TX_PWR_CFG_2: MCS8, TX_PWR_CFG_3: unknown,
-		 * TX_PWR_CFG_4: unknown
-		 */
-		txpower = rt2x00_get_field16(eeprom,
-					     EEPROM_TXPOWER_BYRATE_RATE0);
-		txpower = rt2800_compensate_txpower(rt2x00dev, is_rate_b, band,
-					     power_level, txpower, delta);
-		rt2x00_set_field32(&reg, TX_PWR_CFG_RATE4, txpower);
+	/*
+	 * calculate temperature compensation delta
+	 */
+	delta += rt2800_get_gain_calibration_delta(rt2x00dev);
 
-		/*
-		 * TX_PWR_CFG_0: 9MBS, TX_PWR_CFG_1: MCS1,
-		 * TX_PWR_CFG_2: MCS9, TX_PWR_CFG_3: unknown,
-		 * TX_PWR_CFG_4: unknown
-		 */
-		txpower = rt2x00_get_field16(eeprom,
-					     EEPROM_TXPOWER_BYRATE_RATE1);
-		txpower = rt2800_compensate_txpower(rt2x00dev, is_rate_b, band,
-					     power_level, txpower, delta);
-		rt2x00_set_field32(&reg, TX_PWR_CFG_RATE5, txpower);
+	/*
+	 * Read MAC txpower values from eeprom
+	 */
+	for (i = 0; i < EEPROM_TXPOWER_BYRATE_SIZE; i++) {
+                rt2x00_eeprom_read(rt2x00dev,
+			EEPROM_TXPOWER_BYRATE + i, &eeprom[i]);
+	}
 
-		/*
-		 * TX_PWR_CFG_0: 12MBS, TX_PWR_CFG_1: MCS2,
-		 * TX_PWR_CFG_2: MCS10, TX_PWR_CFG_3: unknown,
-		 * TX_PWR_CFG_4: unknown
-		 */
-		txpower = rt2x00_get_field16(eeprom,
-					     EEPROM_TXPOWER_BYRATE_RATE2);
-		txpower = rt2800_compensate_txpower(rt2x00dev, is_rate_b, band,
-					     power_level, txpower, delta);
-		rt2x00_set_field32(&reg, TX_PWR_CFG_RATE6, txpower);
+	/*
+	 * Get calibrated txpower value of OFDM MCS6 data rate
+	 */
+	txpower_calibrated = rt2800_get_calibrated_txpower(rt2x00dev, band);
 
-		/*
-		 * TX_PWR_CFG_0: 18MBS, TX_PWR_CFG_1: MCS3,
-		 * TX_PWR_CFG_2: MCS11, TX_PWR_CFG_3: unknown,
-		 * TX_PWR_CFG_4: unknown
-		 */
-		txpower = rt2x00_get_field16(eeprom,
-					     EEPROM_TXPOWER_BYRATE_RATE3);
-		txpower = rt2800_compensate_txpower(rt2x00dev, is_rate_b, band,
-					     power_level, txpower, delta);
-		rt2x00_set_field32(&reg, TX_PWR_CFG_RATE7, txpower);
+	/*
+	 * Get hardware max txpower
+	 */
+	hw_max_txpower = rt2800_get_hw_max_txpower(rt2x00dev,
+		band, eeprom, txpower_calibrated);
 
-		rt2800_register_write(rt2x00dev, offset, reg);
+	/*
+	 * set bbp tx power
+	 */
+	bbp_txpower_drop = rt2800_bbp_txpower_config(rt2x00dev,
+		power_level, hw_max_txpower);
 
-		/* next TX_PWR_CFG register */
-		offset += 4;
-	}
+	/* set mac tx power */
+	rt2800_mac_txpower_config(rt2x00dev, eeprom, txpower_calibrated,
+		hw_max_txpower, power_level, bbp_txpower_drop, delta);
 }
 
 void rt2800_gain_calibration(struct rt2x00_dev *rt2x00dev)
@@ -4880,8 +4904,11 @@ static int rt2800_init_eeprom(struct rt2
 	rt2x00_eeprom_read(rt2x00dev, EEPROM_EIRP_MAX_TX_POWER, &eeprom);
 
 	if (rt2x00_get_field16(eeprom, EEPROM_EIRP_MAX_TX_POWER_2GHZ) <
-					EIRP_MAX_TX_POWER_LIMIT)
+					EIRP_MAX_TX_POWER_LIMIT) {
 		__set_bit(CAPABILITY_POWER_LIMIT, &rt2x00dev->cap_flags);
+	} else {
+		printk("%s: EEPROM_EIRP_MAX_TX_POWER_2GHZ set to default 15dBm value!\n", __func__);
+	}
 
 	return 0;
 }
Index: compat-wireless-2012-09-07/drivers/net/wireless/rt2x00/rt2800.h
===================================================================
--- compat-wireless-2012-09-07.orig/drivers/net/wireless/rt2x00/rt2800.h
+++ compat-wireless-2012-09-07/drivers/net/wireless/rt2x00/rt2800.h
@@ -1913,9 +1913,12 @@ struct mac_iveiv_entry {
  * 0 - normal,
  * 1 - drop tx power by 6dBm,
  * 2 - drop tx power by 12dBm,
- * 3 - increase tx power by 6dBm
+ * 3 - increase tx power by 6dBm	(not working)
  */
 #define BBP1_TX_POWER_CTRL		FIELD8(0x07)
+#define BBP1_TX_POWER_NORMAL		0
+#define BBP1_TX_POWER_DROP_6_DBM	1
+#define BBP1_TX_POWER_DROP_12_DBM	2
 #define BBP1_TX_ANTENNA			FIELD8(0x18)
 
 /*
